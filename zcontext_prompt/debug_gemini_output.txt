{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```\n###backend/formforgeapi/__init__.py###\n# path: backend/formforgeapi/__init__.py\n\n###END_OF_FILE###\n```\n\n```\n###backend/formforgeapi/admin.py###\n# path: backend/formforgeapi/admin.py\nfrom django.contrib import admin\nfrom .models import Department, Form, FormField, FormSubmission, SubmissionValue\n\n@admin.register(Department)\nclass DepartmentAdmin(admin.ModelAdmin):\n    list_display = ('id', 'name')\n    search_fields = ('name',)\n\n@admin.register(Form)\nclass FormAdmin(admin.ModelAdmin):\n    list_display = ('id', 'title', 'department', 'created_by', 'created_at')\n    list_filter = ('department', 'created_at')\n    search_fields = ('title', 'description')\n    readonly_fields = ('created_at', 'updated_at')\n\n@admin.register(FormField)\nclass FormFieldAdmin(admin.ModelAdmin):\n    list_display = ('id', 'form', 'label', 'field_type', 'is_required', 'is_master', 'order')\n    list_filter = ('form', 'field_type', 'is_required', 'is_master')\n    search_fields = ('label',)\n\n@admin.register(FormSubmission)\nclass FormSubmissionAdmin(admin.ModelAdmin):\n    list_display = ('id', 'form', 'created_by', 'created_at')\n    list_filter = ('form', 'created_at')\n    readonly_fields = ('created_at', 'updated_at')\n\n@admin.register(SubmissionValue)\nclass SubmissionValueAdmin(admin.ModelAdmin):\n    list_display = ('id', 'submission', 'form_field', 'value')\n    list_filter = ('submission', 'form_field')\n    search_fields = ('value',)\n\n\n###END_OF_FILE###\n```\n\n```\n###backend/formforgeapi/api/__init__.py###\n# path: backend/formforgeapi/api/__init__.py\n\n###END_OF_FILE###\n```\n\n```\n###backend/formforgeapi/api/permissions.py###\n# path: backend/formforgeapi/api/permissions.py\n\n###END_OF_FILE###\n```\n\n```\n###backend/formforgeapi/api/serializers.py###\n# path: backend/formforgeapi/api/serializers.py\nfrom rest_framework import serializers\nfrom ..models import Department, Form, FormField, FormSubmission, SubmissionValue\n\nclass DepartmentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Department\n        fields = ['id', 'name']\n\nclass FormSerializer(serializers.ModelSerializer):\n    department_name = serializers.CharField(source='department.name', read_only=True)\n    created_by_username = serializers.CharField(source='created_by.username', read_only=True)\n\n    class Meta:\n        model = Form\n        fields = ['id', 'title', 'description', 'department', 'department_name', 'created_by_username', 'created_at', 'updated_at']\n        read_only_fields = ['created_at', 'updated_at', 'created_by_username']\n\nclass FormFieldSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = FormField\n        fields = ['id', 'form', 'label', 'field_type', 'is_required', 'is_master', 'order']\n\nclass FormSubmissionSerializer(serializers.ModelSerializer):\n    created_by_username = serializers.CharField(source='created_by.username', read_only=True)\n    class Meta:\n        model = FormSubmission\n        fields = ['id', 'form', 'created_by_username', 'created_at', 'updated_at']\n        read_only_fields = ['created_at', 'updated_at', 'created_by_username']\n\n\nclass SubmissionValueSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = SubmissionValue\n        fields = ['id', 'submission', 'form_field', 'value']\n\n###END_OF_FILE###\n```\n\n```\n###backend/formforgeapi/api/urls.py###\n# path: backend/formforgeapi/api/urls.py\nfrom rest_framework import routers\nfrom .views import DepartmentViewSet, FormViewSet, FormFieldViewSet, FormSubmissionViewSet\n\nrouter = routers.DefaultRouter()\nrouter.register(r'departments', DepartmentViewSet)\nrouter.register(r'forms', FormViewSet)\nrouter.register(r'form-fields', FormFieldViewSet)\nrouter.register(r'form-submissions', FormSubmissionViewSet)\n\nurlpatterns = router.urls\n\n###END_OF_FILE###\n```\n\n```\n###backend/formforgeapi/api/views.py###\n# path: backend/formforgeapi/api/views.py\nfrom rest_framework import viewsets\nfrom ..services import formforgeapi_service as service\nfrom .serializers import DepartmentSerializer, FormSerializer, FormFieldSerializer, FormSubmissionSerializer, SubmissionValueSerializer\nfrom ..models import Department, Form, FormField, FormSubmission, SubmissionValue\n\nclass DepartmentViewSet(viewsets.ModelViewSet):\n    serializer_class = DepartmentSerializer\n\n    def get_queryset(self):\n        return service.get_all_departments()\n\nclass FormViewSet(viewsets.ModelViewSet):\n    serializer_class = FormSerializer\n\n    def get_queryset(self):\n        return service.get_all_forms()\n    \n    def perform_create(self, serializer):\n        serializer.save(created_by=self.request.user)\n\nclass FormFieldViewSet(viewsets.ModelViewSet):\n    serializer_class = FormFieldSerializer\n\n    def get_queryset(self):\n        return service.get_all_form_fields()\n\nclass FormSubmissionViewSet(viewsets.ModelViewSet):\n    serializer_class = FormSubmissionSerializer\n\n    def get_queryset(self):\n        return service.get_all_form_submissions()\n\n    def perform_create(self, serializer):\n        submission = serializer.save(created_by=self.request.user)\n        service.save_submission(submission, self.request.data.get('submitted_data', {}))\n\n\n###END_OF_FILE###\n```\n\n```\n###backend/formforgeapi/apps.py###\n# path: backend/formforgeapi/apps.py\nfrom django.apps import AppConfig\n\n\nclass FormforgeapiConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'formforgeapi'\n\n###END_OF_FILE###\n```\n\n```\n###backend/formforgeapi/migrations/__init__.py###\n# path: backend/formforgeapi/migrations/__init__.py\n\n###END_OF_FILE###\n```\n\n```\n###backend/formforgeapi/models/__init__.py###\n# path: backend/formforgeapi/models/__init__.py\nfrom .formforgeapi import *\n\n###END_OF_FILE###\n```\n\n```\n###backend/formforgeapi/models/formforgeapi.py###\n# path: backend/formforgeapi/models/formforgeapi.py\nfrom django.db import models\nfrom django.contrib.auth.models import User\n\nclass Department(models.Model):\n    name = models.CharField(max_length=255, verbose_name=\"Departman Adı\")\n\n    def __str__(self):\n        return self.name\n\nclass Form(models.Model):\n    title = models.CharField(max_length=255, verbose_name=\"Form Başlığı\")\n    description = models.TextField(blank=True, verbose_name=\"Açıklama\")\n    department = models.ForeignKey(Department, on_delete=models.CASCADE, verbose_name=\"Departman\")\n    created_by = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name=\"Oluşturan\")\n    created_at = models.DateTimeField(auto_now_add=True, verbose_name=\"Oluşturulma Tarihi\")\n    updated_at = models.DateTimeField(auto_now=True, verbose_name=\"Güncellenme Tarihi\")\n\n    def __str__(self):\n        return self.title\n\nclass FormField(models.Model):\n    class FieldType(models.TextChoices):\n        TEXT = 'text', 'Metin'\n        NUMBER = 'number', 'Sayı'\n        DATE = 'date', 'Tarih'\n        TEXTAREA = 'textarea', 'Uzun Metin'\n        SELECT = 'select', 'Seçim'\n        CHECKBOX = 'checkbox', 'Onay Kutusu'\n        RADIO = 'radio', 'Radyo Düğmesi'\n\n\n    form = models.ForeignKey(Form, on_delete=models.CASCADE, related_name='fields', verbose_name=\"Form\")\n    label = models.CharField(max_length=255, verbose_name=\"Etiket\")\n    field_type = models.CharField(max_length=20, choices=FieldType.choices, verbose_name=\"Alan Tipi\")\n    is_required = models.BooleanField(default=False, verbose_name=\"Zorunlu\")\n    is_master = models.BooleanField(default=False, verbose_name=\"Ana Listede Göster\")\n    order = models.IntegerField(default=0, verbose_name=\"Sıralama\")\n\n    def __str__(self):\n        return self.label\n\nclass FormSubmission(models.Model):\n    form = models.ForeignKey(Form, on_delete=models.CASCADE, verbose_name=\"Form\")\n    created_by = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name=\"Oluşturan\")\n    created_at = models.DateTimeField(auto_now_add=True, verbose_name=\"Oluşturulma Tarihi\")\n    updated_at = models.DateTimeField(auto_now=True, verbose_name=\"Güncellenme Tarihi\")\n\n    def __str__(self):\n        return f\"{self.form.title} - {self.created_at}\"\n\nclass SubmissionValue(models.Model):\n    submission = models.ForeignKey(FormSubmission, on_delete=models.CASCADE, related_name='values', verbose_name=\"Form Gönderimi\")\n    form_field = models.ForeignKey(FormField, on_delete=models.CASCADE, verbose_name=\"Form Alanı\")\n    value = models.TextField(verbose_name=\"Değer\")\n\n    def __str__(self):\n        return self.value\n\n###END_OF_FILE###\n```\n\n```\n###backend/formforgeapi/services/__init__.py###\n# path: backend/formforgeapi/services/__init__.py\nfrom .formforgeapi_service import *\n\n###END_OF_FILE###\n```\n\n```\n###backend/formforgeapi/services/formforgeapi_service.py###\n# path: backend/formforgeapi/services/formforgeapi_service.py\nfrom ..models import Department, Form, FormField, FormSubmission, SubmissionValue\nfrom typing import Iterable, Dict\n\ndef get_all_departments() -\u003e Iterable[Department]:\n    \"\"\"Tüm departmanları döndürür.\"\"\"\n    return Department.objects.all()\n\ndef get_all_forms() -\u003e Iterable[Form]:\n    \"\"\"Tüm formları döndürür.\"\"\"\n    return Form.objects.all()\n\ndef get_all_form_fields() -\u003e Iterable[FormField]:\n    \"\"\"Tüm form alanlarını döndürür.\"\"\"\n    return FormField.objects.all()\n\ndef get_all_form_submissions() -\u003e Iterable[FormSubmission]:\n    \"\"\"Tüm form gönderimlerini döndürür.\"\"\"\n    return FormSubmission.objects.all()\n\ndef save_submission(submission: FormSubmission, submitted_data: Dict) -\u003e None:\n    \"\"\"Form gönderim değerlerini kaydeder.\"\"\"\n    form_fields = submission.form.fields.all()\n    for field in form_fields:\n        value = submitted_data.get(str(field.id))\n        SubmissionValue.objects.create(submission=submission, form_field=field, value=value)\n\n###END_OF_FILE###\n```\n\n```\n###backend/formforgeapi/tasks/__init__.py###\n# path: backend/formforgeapi/tasks/__init__.py\n\n###END_OF_FILE###\n```\n\n```\n###backend/formforgeapi/tasks/formforgeapi_tasks.py###\n# path: backend/formforgeapi/tasks/formforgeapi_tasks.py\n\n###END_OF_FILE###\n```\n\n```\n###backend/formforgeapi/tests/__init__.py###\n# path: backend/formforgeapi/tests/__init__.py\n\n###END_OF_FILE###\n```\n\n```\n###backend/formforgeapi/tests/test_formforgeapi.py###\n# path: backend/formforgeapi/tests/test_formforgeapi.py\n\n###END_OF_FILE###\n```\n\n```\n###frontend/src/components/formforgeapi/api/FormForgeApi.js###\n// path: frontend/src/components/formforgeapi/api/FormForgeApi.js\nimport axiosClient from \"../../../utils/axiosClient\";\n\nconst formforgeapiApi = {\n    getAllDepartments: (params) =\u003e {\n        const url = '/formforgeapi/departments/';\n        return axiosClient.get(url, { params });\n    },\n    getAllForms: (params) =\u003e {\n        const url = '/formforgeapi/forms/';\n        return axiosClient.get(url, { params });\n    },\n    getFormFields: (formId) =\u003e {\n        const url = `/formforgeapi/form-fields/?form=${formId}`;\n        return axiosClient.get(url);\n    },\n    createFormSubmission: (data) =\u003e {\n        const url = '/formforgeapi/form-submissions/';\n        return axiosClient.post(url, data);\n    },\n    getFormSubmissions: (formId, params) =\u003e {\n      const url = `/formforgeapi/form-submissions/?form=${formId}`;\n      return axiosClient.get(url, { params });\n    },\n    deleteForm: (formId) =\u003e {\n        const url = `/formforgeapi/forms/${formId}/`;\n        return axiosClient.delete(url);\n    }\n};\n\nexport { formforgeapiApi };\n\n###END_OF_FILE###\n```\n\n```\n###frontend/src/components/formforgeapi/components/components/page-level/FormBuilderScreen.jsx###\n// path: frontend/src/components/formforgeapi/components/components/page-level/FormBuilderScreen.jsx\nimport React, { useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from \"yup\";\nimport styles from '../../../css/FormForgeAPI.module.css';\n\nconst schema = yup.object().shape({\n    title: yup.string().required(\"Form başlığı zorunludur.\"),\n    department: yup.number().required(\"Departman seçimi zorunludur.\"),\n    fields: yup.array().of(\n        yup.object().shape({\n            label: yup.string().required(\"Etiket zorunludur.\"),\n            field_type: yup.string().required(\"Alan tipi zorunludur.\"),\n        })\n    )\n});\n\nconst FormBuilderScreen = () =\u003e {\n    const { register, control, handleSubmit, formState: { errors } } = useForm({\n        resolver: yupResolver(schema),\n        defaultValues: {\n            fields: [{ label: \"\", field_type: \"text\", is_required: false, is_master: false }]\n        }\n    });\n    const { fields, append, remove, move } = useFieldArray({\n        control,\n        name: \"fields\"\n    });\n\n    const onSubmit = data =\u003e console.log(data);\n\n    const handleOnDragEnd = (result) =\u003e {\n        if (!result.destination) return;\n        move(result.source.index, result.destination.index);\n    }\n\n    return (\n        \u003cform onSubmit={handleSubmit(onSubmit)}\u003e\n            \u003cdiv\u003e\n                \u003clabel htmlFor=\"title\"\u003eForm Başlığı\u003c/label\u003e\n                \u003cinput type=\"text\" {...register(\"title\")} /\u003e\n                \u003cp\u003e{errors.title?.message}\u003c/p\u003e\n            \u003c/div\u003e\n            \u003cdiv\u003e\n                \u003clabel htmlFor=\"department\"\u003eDepartman\u003c/label\u003e\n                \u003cselect {...register(\"department\")}\u003e\n                    \u003coption value=\"\"\u003eSeçiniz\u003c/option\u003e\n                    {/* Departmanları backend'den çekip burada listeleyeceğiz */}\n                    \u003coption value=\"1\"\u003eDepartman 1\u003c/option\u003e\n                    \u003coption value=\"2\"\u003eDepartman 2\u003c/option\u003e\n                \u003c/select\u003e\n                \u003cp\u003e{errors.department?.message}\u003c/p\u003e\n            \u003c/div\u003e\n\n            \u003cDragDropContext onDragEnd={handleOnDragEnd}\u003e\n                \u003cDroppable droppableId=\"fields\"\u003e\n                    {(provided) =\u003e (\n                        \u003cul {...provided.droppableProps} ref={provided.innerRef}\u003e\n                            {fields.map((field, index) =\u003e (\n                                \u003cDraggable key={field.id} draggableId={field.id} index={index}\u003e\n                                    {(provided) =\u003e (\n                                        \u003cli {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}\u003e\n                                            \u003cdiv\u003e\n                                                \u003clabel htmlFor={`fields.${index}.label`}\u003eEtiket\u003c/label\u003e\n                                                \u003cinput type=\"text\" {...register(`fields.${index}.label`)} /\u003e\n                                                \u003cp\u003e{errors.fields?.[index]?.label?.message}\u003c/p\u003e\n                                            \u003c/div\u003e\n                                            \u003cdiv\u003e\n                                                \u003clabel htmlFor={`fields.${index}.field_type`}\u003eAlan Tipi\u003c/label\u003e\n                                                \u003cselect {...register(`fields.${index}.field_type`)}\u003e\n                                                    \u003coption value=\"text\"\u003eMetin\u003c/option\u003e\n                                                    \u003coption value=\"number\"\u003eSayı\u003c/option\u003e\n                                                    \u003coption value=\"date\"\u003eTarih\u003c/option\u003e\n                                                    {/* Diğer alan tipleri */}\n                                                \u003c/select\u003e\n                                                \u003cp\u003e{errors.fields?.[index]?.field_type?.message}\u003c/p\u003e\n                                            \u003c/div\u003e\n                                            \u003cdiv\u003e\n                                                \u003cinput type=\"checkbox\" {...register(`fields.${index}.is_required`)} /\u003e\n                                                \u003clabel htmlFor={`fields.${index}.is_required`}\u003eZorunlu\u003c/label\u003e\n                                            \u003c/div\u003e\n                                            \u003cdiv\u003e\n                                                \u003cinput type=\"checkbox\" {...register(`fields.${index}.is_master`)} /\u003e\n                                                \u003clabel htmlFor={`fields.${index}.is_master`}\u003eAna Listede Göster\u003c/label\u003e\n                                            \u003c/div\u003e\n                                            \u003cbutton type=\"button\" onClick={() =\u003e remove(index)}\u003eAlanı Kaldır\u003c/button\u003e\n                                        \u003c/li\u003e\n                                    )}\n                                \u003c/Draggable\u003e\n                            ))}\n                            {provided.placeholder}\n                        \u003c/ul\u003e\n                    )}\n                \u003c/Droppable\u003e\n            \u003c/DragDropContext\u003e\n\n            \u003cbutton type=\"button\" onClick={() =\u003e append({ label: \"\", field_type: \"text\", is_required: false, is_master: false })}\u003eAlan Ekle\u003c/button\u003e\n            \u003cinput type=\"submit\" /\u003e\n        \u003c/form\u003e\n    );\n};\n\nexport default FormBuilderScreen;\n###END_OF_FILE###\n```\n\n```\n###frontend/src/components/formforgeapi/components/components/page-level/FormDataListScreen.jsx###\n// path: frontend/src/components/formforgeapi/components/components/page-level/FormDataListScreen.jsx\nimport React, { useMemo, useEffect, useState, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { formforgeapiApi } from '../../../api/FormForgeApi';\nimport DataTable from '../reusable/DataTable';\nimport styles from '../../../css/FormForgeAPI.module.css';\nimport { toast } from 'react-toastify';\n\nconst FormDataListScreen = () =\u003e {\n    const { formId } = useParams();\n    const [submissions, setSubmissions] = useState([]);\n    const [columns, setColumns] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [formFields, setFormFields] = useState([]);\n\n    const fetchFormData = useCallback(async () =\u003e {\n        setLoading(true);\n        try {\n            const submissionsResponse = await formforgeapiApi.getFormSubmissions(formId);\n            if (submissionsResponse && submissionsResponse.data && submissionsResponse.data.data) {\n                setSubmissions(submissionsResponse.data.data);\n            }\n\n            const fieldsResponse = await formforgeapiApi.getFormFields(formId);\n            if (fieldsResponse && fieldsResponse.data) {\n                setFormFields(fieldsResponse.data);\n                const masterColumns = fieldsResponse.data.filter(field =\u003e field.is_master).map(field =\u003e ({\n                    Header: field.label,\n                    accessor: `values.${field.id}.value` // Accessing nested data\n                }));\n                setColumns(masterColumns);\n            }\n        } catch (error) {\n            toast.error(\"Veriler alınırken bir hata oluştu.\");\n            console.error(\"Error fetching form data:\", error);\n        } finally {\n            setLoading(false);\n        }\n    }, [formId]);\n\n    useEffect(() =\u003e {\n        fetchFormData();\n    }, [fetchFormData]);\n\n\n    const data = useMemo(() =\u003e submissions, [submissions]);\n\n    return (\n        \u003cdiv\u003e\n            \u003ch2\u003eForm Verileri\u003c/h2\u003e\n            \u003cDataTable columns={columns} data={data} loading={loading} /\u003e\n        \u003c/div\u003e\n    );\n};\n\nexport default FormDataListScreen;\n###END_OF_FILE###\n```\n\n```\n###frontend/src/components/formforgeapi/components/components/page-level/FormFillScreen.jsx###\n// path: frontend/src/components/formforgeapi/components/components/page-level/FormFillScreen.jsx\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useForm } from \"react-hook-form\";\nimport { formforgeapiApi } from '../../../api/FormForgeApi';\nimport { toast } from 'react-toastify';\n\nconst FormFillScreen = () =\u003e {\n    const { formId } = useParams();\n    const { register, handleSubmit, reset, formState: { errors } } = useForm();\n    const [fields, setFields] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() =\u003e {\n        const fetchFields = async () =\u003e {\n            setLoading(true);\n            try {\n                const response = await formforgeapiApi.getFormFields(formId);\n                setFields(response.data);\n            } catch (error) {\n                toast.error(\"Form alanları alınırken bir hata oluştu.\");\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchFields();\n    }, [formId]);\n\n    const onSubmit = async (data) =\u003e {\n        try {\n            const response = await formforgeapiApi.createFormSubmission({ form: formId, submitted_data: data });\n            toast.success(\"Form başarıyla gönderildi!\");\n            reset(); // Formu temizle\n        } catch (error) {\n            toast.error(\"Form gönderilirken bir hata oluştu.\");\n        }\n    };\n\n    if (loading) {\n        return \u003cdiv\u003eYükleniyor...\u003c/div\u003e;\n    }\n\n    return (\n        \u003cform onSubmit={handleSubmit(onSubmit)}\u003e\n            {fields.map(field =\u003e (\n                \u003cdiv key={field.id}\u003e\n                    \u003clabel htmlFor={field.id}\u003e{field.label}\u003c/label\u003e\n                    \u003cinput type={field.field_type} {...register(String(field.id), { required: field.is_required })} /\u003e\n                    {errors[field.id] && \u003cp\u003e{field.label} alanı zorunludur.\u003c/p\u003e}\n                \u003c/div\u003e\n            ))}\n            \u003cinput type=\"submit\" value=\"Gönder\" /\u003e\n        \u003c/form\u003e\n    );\n};\n\nexport default FormFillScreen;\n###END_OF_FILE###\n```\n\n```\n###frontend/src/components/formforgeapi/components/components/page-level/FormSchemaListScreen.jsx###\n// path: frontend/src/components/formforgeapi/components/components/page-level/FormSchemaListScreen.jsx\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { formforgeapiApi } from '../../../api/FormForgeApi';\nimport SchemaTable from '../reusable/SchemaTable';\nimport { toast } from 'react-toastify';\n\nconst FormSchemaListScreen = () =\u003e {\n    const [schemas, setSchemas] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    const fetchSchemas = useCallback(async () =\u003e {\n        setLoading(true);\n        try {\n            const response = await formforgeapiApi.getAllForms();\n            setSchemas(response.data.data);\n        } catch (error) {\n            toast.error(\"Form şemaları alınırken bir hata oluştu.\");\n        } finally {\n            setLoading(false);\n        }\n    }, []);\n\n    useEffect(() =\u003e {\n        fetchSchemas();\n    }, [fetchSchemas]);\n\n    const deleteSchema = useCallback(async (id) =\u003e {\n        try {\n            await formforgeapiApi.deleteForm(id);\n            setSchemas(schemas.filter(schema =\u003e schema.id !== id));\n            toast.success(\"Form şeması başarıyla silindi!\");\n        } catch (error) {\n            toast.error(\"Form şeması silinirken bir hata oluştu.\");\n        }\n    }, [schemas]);\n\n    return (\n        \u003cdiv\u003e\n            \u003ch2\u003eForm Şemaları\u003c/h2\u003e\n            \u003cSchemaTable schemas={schemas} loading={loading} deleteSchema={deleteSchema} /\u003e\n        \u003c/div\u003e\n    );\n};\n\nexport default FormSchemaListScreen;\n###END_OF_FILE###\n```\n\n```\n###frontend/src/components/formforgeapi/components/components/reusable/DataTable.jsx###\n// path: frontend/src/components/formforgeapi/components/components/reusable/DataTable.jsx\nimport React from 'react';\nimport { useTable, useSortBy } from 'react-table';\nimport styles from '../../../css/FormForgeAPI.module.css';\n\nconst DataTable = ({ columns, data, loading }) =\u003e {\n    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable({ columns, data }, useSortBy);\n    if (loading) return \u003cdiv className={styles.loading}\u003eYükleniyor...\u003c/div\u003e;\n    return (\n        \u003ctable {...getTableProps()} className={styles.dataTable}\u003e\n            \u003cthead\u003e\n                {headerGroups.map(hg =\u003e (\n                    \u003ctr {...hg.getHeaderGroupProps()}\u003e\n                        {hg.headers.map(col =\u003e (\n                            \u003cth {...col.getHeaderProps(col.getSortByToggleProps())}\u003e\n                                {col.render('Header')}\n                                \u003cspan\u003e{col.isSorted ? (col.isSortedDesc ? ' 🔽' : ' 🔼') : ''}\u003c/span\u003e\n                            \u003c/th\u003e\n                        ))}\n                    \u003c/tr\u003e\n                ))}\n            \u003c/thead\u003e\n            \u003ctbody {...getTableBodyProps()}\u003e\n                {rows.map(row =\u003e {\n                    prepareRow(row);\n                    return (\n                        \u003ctr {...row.getRowProps()}\u003e\n                            {row.cells.map(cell =\u003e \u003ctd {...cell.getCellProps()}\u003e{cell.render('Cell')}\u003c/td\u003e)}\n                        \u003c/tr\u003e\n                    );\n                })}\n            \u003c/tbody\u003e\n        \u003c/table\u003e\n    );\n};\nexport default DataTable;\n\n###END_OF_FILE###\n```\n\n```\n###frontend/src/components/formforgeapi/components/components/reusable/SchemaTable.jsx###\n// path: frontend/src/components/formforgeapi/components/components/reusable/SchemaTable.jsx\nimport React from 'react';\nimport { useTable, useSortBy } from 'react-table';\nimport { Link } from 'react-router-dom';\nimport styles from '../../../css/FormForgeAPI.module.css';\n\nconst SchemaTable = ({ schemas, loading, deleteSchema }) =\u003e {\n    const data = React.useMemo(() =\u003e schemas, [schemas]);\n    const columns = React.useMemo(() =\u003e [\n        { Header: 'Form Başlığı', accessor: 'title' },\n        { Header: 'Departman', accessor: 'department_name' },\n        { Header: 'Oluşturan', accessor: 'created_by.username' },\n        {\n            Header: 'İşlemler',\n            accessor: 'id',\n            Cell: ({ row }) =\u003e (\n                \u003cdiv className={styles.actions}\u003e\n                    \u003cLink to={`/formforgeapi/fill/${row.original.id}`}\u003eFormu Doldur\u003c/Link\u003e\n                    \u003cLink to={`/formforgeapi/data/${row.original.id}`}\u003eVerileri Gör\u003c/Link\u003e\n                    \u003cLink to={`/formforgeapi/edit/${row.original.id}`}\u003eDüzenle\u003c/Link\u003e\n                    \u003cbutton onClick={() =\u003e deleteSchema(row.original.id)} className={styles.deleteButtonSmall}\u003eSil\u003c/button\u003e\n                \u003c/div\u003e\n            )\n        }\n    ], [deleteSchema]);\n\n    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable({ columns, data }, useSortBy);\n    if (loading) return \u003cdiv className={styles.loading}\u003eYükleniyor...\u003c/div\u003e;\n    return (\n        \u003ctable {...getTableProps()} className={styles.dataTable}\u003e\n            \u003cthead\u003e\n                {headerGroups.map(hg =\u003e (\n                    \u003ctr {...hg.getHeaderGroupProps()}\u003e\n                        {hg.headers.map(col =\u003e (\n                            \u003cth {...col.getHeaderProps(col.getSortByToggleProps())}\u003e\n                                {col.render('Header')}\n                                \u003cspan\u003e{col.isSorted ? (col.isSortedDesc ? ' 🔽' : ' 🔼') : ''}\u003c/span\u003e\n                            \u003c/th\u003e\n                        ))}\n                    \u003c/tr\u003e\n                ))}\n            \u003c/thead\u003e\n            \u003ctbody {...getTableBodyProps()}\u003e\n                {rows.map(row =\u003e {\n                    prepareRow(row);\n                    return (\n                        \u003ctr {...row.getRowProps()}\u003e\n                            {row.cells.map(cell =\u003e \u003ctd {...cell.getCellProps()}\u003e{cell.render('Cell')}\u003c/td\u003e)}\n                        \u003c/tr\u003e\n                    );\n                })}\n            \u003c/tbody\u003e\n        \u003c/table\u003e\n    );\n};\nexport default SchemaTable;\n\n###END_OF_FILE###\n```\n\n```\n###frontend/src/components/formforgeapi/components/containers/FormForgeApiContainer.jsx###\n// path: frontend/src/components/formforgeapi/components/containers/FormForgeApiContainer.jsx\nimport React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport FormBuilderScreen from '../components/page-level/FormBuilderScreen';\nimport FormSchemaListScreen from '../components/page-level/FormSchemaListScreen';\nimport FormDataListScreen from '../components/page-level/FormDataListScreen';\nimport FormFillScreen from '../components/page-level/FormFillScreen';\n\nconst FormForgeApiContainer = () =\u003e {\n    return (\n        \u003cRoutes\u003e\n            \u003cRoute path=\"/\" element={\u003cFormSchemaListScreen /\u003e} /\u003e\n            \u003cRoute path=\"/create\" element={\u003cFormBuilderScreen /\u003e} /\u003e\n            \u003cRoute path=\"/data/:formId\" element={\u003cFormDataListScreen /\u003e} /\u003e\n            \u003cRoute path=\"/fill/:formId\" element={\u003cFormFillScreen /\u003e} /\u003e\n            \u003cRoute path=\"/edit/:formId\" element={\u003cFormBuilderScreen /\u003e} /\u003e {/* Düzenleme ekranı için FormBuilderScreen'i kullanabiliriz */}\n        \u003c/Routes\u003e\n    );\n};\n\nexport default FormForgeApiContainer;\n###END_OF_FILE###\n```\n\n```\n###frontend/src/components/formforgeapi/css/FormForgeAPI.module.css###\n/* path: frontend/src/components/formforgeapi/css/FormForgeAPI.module.css */\n\n.dataTable {\n    width: 100%;\n    border-collapse: collapse;\n    margin-top: 20px;\n}\n\n.dataTable th,\n.dataTable td {\n    border: 1px solid var(--sap-grey-3);\n    padding: 8px;\n    text-align: left;\n}\n\n.dataTable th {\n    background-color: var(--sap-grey-2);\n    font-weight: bold;\n}\n\n.loading {\n    text-align: center;\n    margin-top: 20px;\n    font-style: italic;\n    color: var(--sap-grey-4);\n}\n\n.actions {\n    display: flex;\n    gap: 10px; /* Adjust as needed */\n}\n\n.deleteButtonSmall {\n    background-color: var(--sap-red); /* Example: Use SAP red color */\n    color: white;\n    border: none;\n    padding: 5px 10px; /* Smaller padding */\n    border-radius: 4px;\n    cursor: pointer;\n}\n\n/* Add more styles as needed */\n\n###END_OF_FILE###\n```\n\n```\n###frontend/src/components/formforgeapi/hooks/useFormForgeApi.js###\n// path: frontend/src/components/formforgeapi/hooks/useFormForgeApi.js\nimport { useState, useCallback } from 'react';\nimport { toast } from 'react-toastify';\nimport { formforgeapiApi } from '../api/FormForgeApi';\n\nexport const useFormForgeApi = () =\u003e {\n    const [departments, setDepartments] = useState([]);\n    const [loadingDepartments, setLoadingDepartments] = useState(false);\n    const [forms, setForms] = useState([]);\n    const [loadingForms, setLoadingForms] = useState(false);\n\n    const fetchDepartments = useCallback(async (params) =\u003e {\n        setLoadingDepartments(true);\n        try {\n            const response = await formforgeapiApi.getAllDepartments(params);\n            setDepartments(response.data.data || []);\n        } catch (error) {\n            toast.error(\"Departmanlar alınırken bir hata oluştu.\");\n        } finally {\n            setLoadingDepartments(false);\n        }\n    }, []);\n\n    const fetchForms = useCallback(async (params) =\u003e {\n        setLoadingForms(true);\n        try {\n            const response = await formforgeapiApi.getAllForms(params);\n            setForms(response.data.data || []);\n        } catch (error) {\n            toast.error(\"Formlar alınırken bir hata oluştu.\");\n        } finally {\n            setLoadingForms(false);\n        }\n    }, []);\n\n\n    return {\n        departments,\n        loadingDepartments,\n        fetchDepartments,\n        forms,\n        loadingForms,\n        fetchForms\n    };\n};\n###END_OF_FILE###\n\n```"
          }
        ],
        "role": "model"
      },
      "finishReason": "STOP",
      "avgLogprobs": -0.01341032599287701
    }
  ],
  "usageMetadata": {
    "promptTokenCount": 6932,
    "candidatesTokenCount": 8039,
    "totalTokenCount": 14971,
    "promptTokensDetails": [
      {
        "modality": "TEXT",
        "tokenCount": 6932
      }
    ],
    "candidatesTokensDetails": [
      {
        "modality": "TEXT",
        "tokenCount": 8039
      }
    ]
  },
  "modelVersion": "gemini-1.5-pro-002",
  "responseId": "a72IaL6OOtiR1PIP0di7wA0"
}
