{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "# ============================================================================\n# API TASARIM BELGESİ (WHITE PAPER) - formforgeapi\n# ============================================================================\n# Not: Bu belge, `sapb1reportsv2` projesi için oluşturulan her yeni API\n# modülünün kimliğini, sözleşmesini ve entegrasyon adımlarını tanımlayan\n# standart şablondur. AI, bu şablonu kullanıcı prompt'una göre doldurur.\n# ============================================================================\n\n## 1. API Künyesi (Özet Kart)\n\n| Alan                     | Bilgi / Değer                                                                          |\n| ------------------------ | -------------------------------------------------------------------------------------- |\n| **Proje** | `sapb1reportsv2`                                                                       |\n| **Modül Adı** | `formforgeapi`                                                                        |\n| **Sürüm** | `v1.0.0`                                                                               |\n| **Oluşturan** | `Selim Koçak`                                                                             |\n| **Sorumlu Ekip/Kişi** | `Selim & Tars`                                                         |\n| **İlk Yayın Tarihi** | `2025-07-29`                                                                           |\n| **Kritik Bağımlılıklar** | `Django REST Framework`, `Celery`, `drf-spectacular`, `loguru`                         |\n| **Harici Sistemler** | `PostgreSQL`, `Redis`, `SAP HANA DB`, `Logo ERP DB` (varsa)                               |\n\n---\n\n## 2. İş Gerekçesi ve Kapsam\n\n\u003e Bu modülün amacı, son kullanıcıların kodlama bilgisi olmadan, sürükle-bırak arayüzüyle kendi veri toplama formlarını oluşturmasını sağlamaktır. Kullanıcılar, forma metin, sayı, tarih gibi farklı tiplerde alanlar ekleyebilmeli, bu alanları zorunlu kılabilmeli ve veri listeleme ekranında hangi alanların görüneceğini (`is_master`) belirleyebilmelidir.\n\n---\n\n## 3. Mimari ve Veri Akışı\n\nBu modül, `sapb1reportsv2` projesinin genel mimarisine (`View -\u003e Service -\u003e Model/External API`) uygun olarak çalışır.\n\n```mermaid\nflowchart TD\n    subgraph Frontend\n        A[React UI] -- JWT Request --\u003e B{axiosClient};\n    end\n\n    subgraph \"Backend (Django: sapreports)\"\n        B -- /api/v1/formforgeapi/ --\u003e C{FormForgeAPIViewSet};\n        C -- Çağırır --\u003e D[FormForgeAPIService];\n        D -- İşler --\u003e E[Veritabanı (PostgreSQL)];\n        D -- Çağırır --\u003e F[Harici Servisler];\n    end\n\n    subgraph \"Arka Plan (Async)\"\n        G[Celery Beat] -- Tetikler --\u003e H[FormForgeAPITask];\n        H -- İşler --\u003e F;\n        H -- Sonuçları Yazar --\u003e E;\n    end\n\n    subgraph \"Harici Sistemler\"\n        F --- I[SAP HANA];\n        F --- J[Logo ERP];\n        F --- K[Diğer API'ler];\n    end\n````\n\n-----\n\n## 4. Veri Modeli ve Şeması\n\n\u003e Bu bölüm, modülün kullandığı ana Django modellerini, alanlarını, tiplerini ve ilişkilerini tanımlar. `Department`, `Form`, `FormField`, `FormSubmission` ve `SubmissionValue` olmak üzere beş model bulunmaktadır. `FormField` modeli, farklı alan tiplerini destekler ve `is_master` alanı ile hangi alanların veri listeleme ekranında gösterileceğini belirler. `SubmissionValue` modeli, form gönderimlerindeki değerleri saklar.\n\n#### 4.1. Django Modeli (`models.py`)\n\n```python\n# Örnek Model Yapısı\nclass Form(models.Model):\n    # ... model alanları buraya ...\n```\n\n#### 4.2. Serializer Şemaları (API Payloads)\n\n  * **Listeleme/Detay Yanıtı (GET - Response)**\n    ```json\n    {\n      \"success\": true,\n      \"data\": {\n        \"id\": 1,\n        \"title\": \"Form Başlığı\",\n        \"description\": \"Açıklama\",\n        \"department\": 1,\n        \"fields\": [\n            {\"label\": \"Ad\", \"field_type\": \"text\", \"is_required\": true, \"is_master\": true},\n            {\"label\": \"Soyad\", \"field_type\": \"text\", \"is_required\": true, \"is_master\": true}\n        ]\n      },\n      \"message\": \"Kayıt başarıyla getirildi.\"\n    }\n    ```\n  * **Oluşturma/Güncelleme İsteği (POST/PUT - Request)**\n    ```json\n    {\n      \"title\": \"Yeni Form Başlığı\",\n      \"description\": \"Yeni Açıklama\",\n      \"department\": 2,\n      \"fields\": [\n          {\"label\": \"Email\", \"field_type\": \"text\", \"is_required\": true, \"is_master\": true}\n      ]\n    }\n    ```\n\n-----\n\n## 5. API Endpoints Sözleşmesi\n\n| HTTP | URL                               | Yetki Sınıfı         | Kısa Açıklama                                       | Örnek Yanıt (Başarılı)                       |\n| :--- | :-------------------------------- | :------------------- | :-------------------------------------------------- | :------------------------------------------- |\n| GET  | `/api/v1/formforgeapi/forms/`          | `IsAuthenticated`    | Tüm formları listeler (pagination aktif).          | `{ \"success\": true, \"data\": [...] }`         |\n| GET  | `/api/v1/formforgeapi/forms/{id}/`     | `IsAuthenticated`    | Belirtilen ID'ye sahip tek bir formu getirir.       | `{ \"success\": true, \"data\": {...} }`         |\n| POST | `/api/v1/formforgeapi/forms/`          | `IsAuthenticated`    | Yeni bir form oluşturur.                           | `{ \"success\": true, \"data\": {...}, \"message\": \"Başarıyla oluşturuldu.\"}` |\n| PUT  | `/api/v1/formforgeapi/forms/{id}/`     | `IsAuthenticated`    | Mevcut bir formu günceller.                         | `{ \"success\": true, \"data\": {...}, \"message\": \"Başarıyla güncellendi.\"}` |\n| POST | `/api/v1/formforgeapi/forms/custom/`   | `IsAdminUser`        |  Özel bir aksiyon gerçekleştirir. | `{ \"success\": true, \"message\": \"İşlem tamamlandı.\" }` |\n\n\n-----\n\n## 6. Zamanlanmış Görevler (Celery Tasks)\n\n\u003e Bu modülde tanımlanmış bir Celery görevi bulunmamaktadır.\n\n| Görev ID (`name`)             | Tanım                                       | Zamanlama (Örnek)           |\n| :---------------------------- | :------------------------------------------ | :-------------------------- |\n\n\n-----\n\n## 7. Yetkilendirme ve Güvenlik\n\n  * **Varsayılan Yetki:** Tüm endpoint'ler, geçerli bir JWT token'ı gerektiren `rest_framework.permissions.IsAuthenticated` ile korunur.\n  * **Yönetici Yetkisi:** Veri senkronizasyonu veya özel işlemler gibi hassas endpoint'ler, yalnızca `staff` kullanıcılara izin veren `rest_framework.permissions.IsAdminUser` ile korunur.\n  * **Hassas Veri:** `.env` dosyasında saklanan `SECRET_KEY`, `HANADB_PASS` gibi hassas bilgilere kod içerisinden asla doğrudan erişilmez.\n\n-----\n\n## 8. Kurulum ve Proje Entegrasyonu\n\n\u003e Bu bölüm, `formforgeapi` modülünün `sapb1reportsv2` projesine nasıl entegre edileceğini açıklar.\n\n1.  **Uygulamayı Ekle:** `backend/sapreports/settings.py` dosyasındaki `INSTALLED_APPS` listesine aşağıdaki satırı ekleyin:\n    ```python\n    'formforgeapi.apps.FormforgeapiConfig',\n    ```\n2.  **URL'leri Ekle:** `backend/sapreports/urls.py` dosyasındaki `urlpatterns` listesine aşağıdaki satırı ekleyin:\n    ```python\n    path('api/v1/formforgeapi/', include('formforgeapi.api.urls')),\n    ```\n3.  **Celery Görevlerini Ekle (varsa):** `backend/sapreports/settings.py` dosyasındaki `CELERY_IMPORTS` listesine aşağıdaki satırı ekleyin:\n    ```python\n    'formforgeapi.tasks',\n    ```\n4.  **Veritabanını Güncelle:** Terminalde aşağıdaki komutları çalıştırın:\n    ```bash\n    python manage.py makemigrations formforgeapi\n    python manage.py migrate\n    ```\n\n-----\n\n## 9. Riskler ve Notlar\n\n\u003e Şu anda bu API ile ilgili bilinen bir risk bulunmamaktadır. Form gönderim verileri, PostgreSQL veritabanında saklanır ve API aracılığıyla erişilebilir.\n\n\u003c!-- end list --\u003e\n"
          }
        ],
        "role": "model"
      },
      "finishReason": "STOP",
      "avgLogprobs": -0.007623508402603207
    }
  ],
  "usageMetadata": {
    "promptTokenCount": 6255,
    "candidatesTokenCount": 2104,
    "totalTokenCount": 8359,
    "promptTokensDetails": [
      {
        "modality": "TEXT",
        "tokenCount": 6255
      }
    ],
    "candidatesTokensDetails": [
      {
        "modality": "TEXT",
        "tokenCount": 2104
      }
    ]
  },
  "modelVersion": "gemini-1.5-pro-002",
  "responseId": "UL6IaMCJJNHH1PIPlbWWsQE"
}
