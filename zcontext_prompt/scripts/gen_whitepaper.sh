#!/usr/bin/env bash
# path: /var/www/sapb1reportsv2/zcontext_prompt/scripts/gen_whitepaper.sh
# =============================================================================
# SAPB1ReportsV2 ‚Äì zcontext_prompt ‚Äì gen_whitepaper.sh v1.1 (Hata D√ºzeltme)
# =============================================================================
# - Mod√ºl isimlendirmesinde b√ºy√ºk/k√º√ß√ºk harf tutarlƒ±lƒ±ƒüƒ± saƒülandƒ±.
# =============================================================================

set -euo pipefail

# Stil sahibi durum mesajlarƒ± i√ßin yardƒ±mcƒ± fonksiyon
print_status() {
    local color_green='\033[0;32m'
    local color_yellow='\033[1;33m'
    local color_blue='\033[0;34m'
    local color_nc='\033[0m' # No Color
    echo -e "\n${color_yellow}==>${color_nc} ${color_blue}$1${color_nc}"
}

# ---------- Ana Betik Ba≈ülangƒ±cƒ± ---------------------------------------------
# ... (Ba≈ülangƒ±√ß ve deƒüi≈üken tanƒ±mlamalarƒ± aynƒ±) ...
CTX_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
PROJECT_ROOT="$(dirname "$CTX_DIR")"
ENV_FILE="$PROJECT_ROOT/backend/.env"
PROMPTS_DIR="${CTX_DIR}/prompts"
OUTPUTS_DIR="${CTX_DIR}/outputs"
WHITEPAPER_TEMPLATE="${CTX_DIR}/whitepaper_api.md"
GEMINI_ENDPOINT_DEFAULT="https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent"
DEBUG_FILE_WP="${CTX_DIR}/debug_gemini_whitepaper_output.txt"

usage () {
    echo "Kullanƒ±m: $0 <module_name>"
    echo "√ñrnek: $0 formforgeapi"
    exit 1
}

[[ $# -ge 1 ]] || usage
MODULE_INPUT="$1"
# D√úZELTME: Girdi ne olursa olsun, standart olarak k√º√ß√ºk harfli versiyonu kullan.
MODULE_LOWER=$(echo "$MODULE_INPUT" | tr '[:upper:]' '[:lower:]')
MODULE_OUTPUT_DIR="${OUTPUTS_DIR}/${MODULE_LOWER}"
FINAL_WHITEPAPER_PATH="${MODULE_OUTPUT_DIR}/whitepaper.md"

print_status "White Paper √ºretimi ba≈ülatƒ±lƒ±yor: ${MODULE_LOWER}"

# --- Gerekli Dosyalarƒ±n Varlƒ±ƒüƒ±nƒ± Kontrol Et ---
# D√úZELTME: Prompt dosyasƒ±nƒ± b√ºy√ºk harfle ararken, diƒüer t√ºm yollarda k√º√ß√ºk harfli versiyonu kullan.
USER_PROMPT_FILE="${PROMPTS_DIR}/${MODULE_INPUT}_user.txt"
MODELS_FILE="${MODULE_OUTPUT_DIR}/backend/${MODULE_LOWER}/models/${MODULE_LOWER}.py"
VIEWS_FILE="${MODULE_OUTPUT_DIR}/backend/${MODULE_LOWER}/api/views.py"
URLS_FILE="${MODULE_OUTPUT_DIR}/backend/${MODULE_LOWER}/api/urls.py"
TASKS_FILE="${MODULE_OUTPUT_DIR}/backend/${MODULE_LOWER}/tasks/${MODULE_LOWER}_tasks.py"

[[ -f "$USER_PROMPT_FILE" ]] || { echo "‚ùå ƒ∞≈ü Emri dosyasƒ± bulunamadƒ±: $USER_PROMPT_FILE"; exit 2; }
[[ -f "$MODELS_FILE" ]] || { echo "‚ùå Model dosyasƒ± bulunamadƒ±: $MODELS_FILE"; exit 2; }
[[ -f "$VIEWS_FILE" ]] || { echo "‚ùå View dosyasƒ± bulunamadƒ±: $VIEWS_FILE"; exit 2; }
[[ -f "$URLS_FILE" ]] || { echo "‚ùå URL dosyasƒ± bulunamadƒ±: $URLS_FILE"; exit 2; }
[[ -f "$WHITEPAPER_TEMPLATE" ]] || { echo "‚ùå White Paper ≈üablonu bulunamadƒ±: $WHITEPAPER_TEMPLATE"; exit 2; }

# ... (API Key y√ºkleme ve Master Prompt olu≈üturma aynƒ±) ...
if [[ -z "${GEMINI_API_KEY:-}" ]]; then
    if [[ -f "$ENV_FILE" ]]; then
        export GEMINI_API_KEY="$(grep -E '^GEMINI_API_KEY=' "$ENV_FILE" | cut -d '=' -f2- | tr -d '"\r')"
    fi
fi
API_KEY="${GEMINI_API_KEY:-}"
[[ -n "$API_KEY" ]] || { echo "‚ùå GEMINI_API_KEY bulunamadƒ±."; exit 3; }
ENDPOINT="${GEMINI_ENDPOINT:-$GEMINI_ENDPOINT_DEFAULT}"

print_status "Referans materyaller okunuyor ve dok√ºmantasyon planƒ± olu≈üturuluyor..."
CELERY_TASKS_CONTENT="Bu mod√ºlde √∂zel bir Celery g√∂revi bulunmamaktadƒ±r."
if [[ -f "$TASKS_FILE" ]]; then
    CELERY_TASKS_CONTENT=$(cat "$TASKS_FILE")
fi

MASTER_PROMPT=$(cat <<EOF
SENƒ∞N G√ñREVƒ∞N:
A≈üaƒüƒ±daki referans materyalleri (i≈ü gereksinimleri, ≈üablon ve √ºretilmi≈ü Python kodu) kullanarak, "WHITE PAPER ≈ûABLONU" b√∂l√ºm√ºn√º eksiksiz bir ≈üekilde doldurmak. √áƒ±ktƒ±n, SADECE ve SADECE doldurulmu≈ü markdown metni olmalƒ±dƒ±r. Ba≈üka hi√ßbir a√ßƒ±klama, kod bloƒüu veya ayra√ß ekleme. Tarih alanlarƒ±nƒ± doldururken bug√ºn√ºn tarihini kullan: $(date +'%Y-%m-%d').
--- B√ñL√úM 1: WHITE PAPER ≈ûABLONU (BUNU DOLDUR) ---
$(cat "$WHITEPAPER_TEMPLATE")
--- B√ñL√úM 2: REFERANS MATERYALLER (BUNLARI KULLAN) ---
REFERANS 2.1: ƒ∞≈û GEREKSƒ∞Nƒ∞MLERƒ∞ VE META Bƒ∞LGƒ∞LER (Kullanƒ±cƒ± Prompt'u)
$(cat "$USER_PROMPT_FILE")
REFERANS 2.2: √úRETƒ∞LEN KOD - DJANGO MODELLERƒ∞ (models.py)
\`\`\`python
$(cat "$MODELS_FILE")
\`\`\`
REFERANS 2.3: √úRETƒ∞LEN KOD - API ENDPOINT'LERƒ∞ (views.py ve urls.py)
\`\`\`python
# views.py
$(cat "$VIEWS_FILE")
# urls.py
$(cat "$URLS_FILE")
\`\`\`
REFERANS 2.4: √úRETƒ∞LEN KOD - ZAMANLANMI≈û G√ñREVLER (tasks.py)
\`\`\`python
${CELERY_TASKS_CONTENT}
\`\`\`
EOF
)

REQUEST_BODY=$(jq -n --arg prompt "$MASTER_PROMPT" '{"contents":[{"role":"user","parts":[{"text": $prompt}]}],"generationConfig": {"temperature": 0.1, "topK": 40, "topP": 0.95, "maxOutputTokens": 4096}}')

print_status "ü§ñ Gemini'ye dok√ºmantasyon isteƒüi g√∂nderiliyor..."
RAW_RESPONSE_JSON=$(curl --connect-timeout 60 --max-time 180 -s -X POST -H "Content-Type: application/json" -d "$REQUEST_BODY" "${ENDPOINT}?key=${API_KEY}")

echo "$RAW_RESPONSE_JSON" > "$DEBUG_FILE_WP"

if jq -e '.error' >/dev/null <<< "$RAW_RESPONSE_JSON"; then
    echo -e "\n‚ùå Gemini API Hatasƒ± Aldƒ±! √úretim durduruldu." >&2; jq . < "$DEBUG_FILE_WP" >&2; exit 10;
fi

GENERATED_TEXT=$(echo "$RAW_RESPONSE_JSON" | jq -r '.candidates[0].content.parts[0].text' 2>/dev/null | sed "s/^[\`']\{3\}markdown//; s/[\`']\{3\}$//")

if [[ -z "$GENERATED_TEXT" || "$GENERATED_TEXT" == "null" ]]; then
    echo -e "\n‚ùå Gemini'den bo≈ü yanƒ±t alƒ±ndƒ±!" >&2; jq . < "$DEBUG_FILE_WP" >&2; exit 11;
fi

print_status "‚úÖ Gemini yanƒ±tƒ± ba≈üarƒ±lƒ±. White Paper dosyasƒ± olu≈üturuluyor..."
echo "$GENERATED_TEXT" > "$FINAL_WHITEPAPER_PATH"
print_status "‚úÖ T√ºm a≈üamalar tamamlandƒ±. White Paper ba≈üarƒ±yla olu≈üturuldu: $FINAL_WHITEPAPER_PATH"